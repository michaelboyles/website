<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Michael Boyles</title><link>https://boyl.es/post/</link><description>Recent content in Posts on Michael Boyles</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://boyl.es/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Two Versions of a Library in Java</title><link>https://boyl.es/post/two-versions-same-library/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://boyl.es/post/two-versions-same-library/</guid><description>&lt;p>Java and its build tools aren&amp;rsquo;t designed to support using two different versions of the same library at runtime.
Generally, that&amp;rsquo;s a conflict that&amp;rsquo;s automatically resolved to one or the other, and that&amp;rsquo;s exactly what we want. But
what if it&amp;rsquo;s not? With a few tricks, it&amp;rsquo;s possible to circumvent that behaviour.&lt;/p></description></item><item><title>Imposter syndrome? You might just be bad at programming</title><link>https://boyl.es/post/imposter-syndrome/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/imposter-syndrome/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome">Imposter syndrome&lt;/a> is the tendency for people to significantly underrate
their own ability and to feel like an imposter within their field. It can make people feel anxious that they&amp;rsquo;re
eventually going to be exposed. Over the past few years, this term&amp;rsquo;s &lt;a href="https://trends.google.com/trends/explore?date=all&amp;amp;q=imposter%20syndrome,impostor%20syndrome">seen a surge in popularity&lt;/a>
within software development. If you express that you&amp;rsquo;re struggling at your programming job, there&amp;rsquo;s a good
chance that you&amp;rsquo;ll be met with comforting replies like &amp;ldquo;&lt;em>you just have imposter syndrome.&lt;/em>&amp;rdquo; There&amp;rsquo;s an alternative
explanation: you might actually be bad.&lt;/p></description></item><item><title>Design patterns reviewed #3: behavioural</title><link>https://boyl.es/post/behavioural-design-patterns/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/behavioural-design-patterns/</guid><description>&lt;p>This is the third and final post in a series in which I’m reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>. This time out I&amp;rsquo;m taking a look at
&lt;a href="https://en.wikipedia.org/wiki/Behavioral_pattern">behavioural patterns&lt;/a>. These all &amp;ldquo;&lt;em>characterize the ways in which
classes or objects interact&lt;/em>&amp;rdquo;. If that sounds indistinct from structural patterns, it&amp;rsquo;s because it is. Just go with it.&lt;/p></description></item><item><title>Reflection is a crutch of the Java ecosystem</title><link>https://boyl.es/post/reflection-is-a-crutch-of-java-ecosystem/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/reflection-is-a-crutch-of-java-ecosystem/</guid><description>&lt;p>Java gained traction because you could write code which could run anywhere, but it continues to be successful in a large
part due to its fantastic ecosystem. Libraries like Spring, Hibernate and Gson are comparable to, if not better than,
practically any equivalent tools available for other languages. However, they&amp;rsquo;ve helped popularise the idea that using
&lt;a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">reflection&lt;/a> is likely to be an intrinsic
part of writing a Java library or framework. As Java developers, we&amp;rsquo;re being short-changed with solutions that force us
to sacrifice strong typing and are impossible to debug.&lt;/p></description></item><item><title>Adding control flow to JSX with TypeScript</title><link>https://boyl.es/post/add-control-flow-to-jsx/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/add-control-flow-to-jsx/</guid><description>&lt;p>In any non-trivial React project, one of the things you&amp;rsquo;ll eventually need to do is render something conditionally.
You &lt;a href="https://react-cn.github.io/react/tips/if-else-in-JSX.html">can&amp;rsquo;t use if-else statements within JSX&lt;/a>. You can use
the conditional (“ternary”) operator but I often find that it produces code that&amp;rsquo;s hard to read. I&amp;rsquo;ve developed a
transform which adds special meaning to certain JSX tags, allowing you to write &lt;code>&amp;lt;If&amp;gt;&lt;/code> and &lt;code>&amp;lt;Else&amp;gt;&lt;/code> blocks which behave
intuitively.&lt;/p></description></item><item><title>Don't sponsor me</title><link>https://boyl.es/post/dont-sponsor-me/</link><pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/dont-sponsor-me/</guid><description>&lt;p>There seems to be a growing trend of software developers panhandling for donations. Whether it&amp;rsquo;s via GitHub Sponsors,
Patreon or &lt;a href="https://ko-fi.com/">Ko-fi&lt;/a>, a culture of entitlement is on the rise. Some even expect to be rewarded for
their Stack Overflow answers. Good luck with that.&lt;/p></description></item><item><title>Design patterns reviewed #2: structural</title><link>https://boyl.es/post/structural-design-patterns/</link><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/structural-design-patterns/</guid><description>&lt;p>This is the second post in a series in which I’m reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>. This time out I&amp;rsquo;m taking a look at
&lt;a href="https://en.wikipedia.org/wiki/Structural_pattern">structural patterns&lt;/a>. These are all strategies for defining and
managing relationships between classes and interfaces.&lt;/p></description></item><item><title>Hybrid CI</title><link>https://boyl.es/post/hybrid-ci/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/hybrid-ci/</guid><description>&lt;p>The company I work for uses GitLab to host our Git repositories. Along with
&lt;a href="https://techcrunch.com/2019/08/08/github-actions-is-now-a-ci-cd-service/">GitHub more recently&lt;/a>, it provides a way to
build your projects directly within the service without relying on an external build server like Jenkins or Travis.
The general reaction here seems positive, and most people seem happy to rely on it for their only automated build now.
I can see the benefits but I&amp;rsquo;m hesitant to fully commit. Hybrid CI is an approach I came up with so I could have my
cake and eat it too.&lt;/p></description></item><item><title>SOLID: the 'SO' stands for Snake Oil</title><link>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</guid><description>&lt;p>SOLID is possibly the most over-hyped concept in all of software engineering. You can throw away that jar of Sudocrem
because we&amp;rsquo;ll have no fence-sitting today, no sir.&lt;/p></description></item><item><title>Next month StackOverflow will pass a catastrophic point in its history</title><link>https://boyl.es/post/next-month-stackoverflow-will-pass-a-catastrophic-point/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/next-month-stackoverflow-will-pass-a-catastrophic-point/</guid><description>I&amp;rsquo;ve used StackOverflow a lot. I&amp;rsquo;m not just talking about landing there from Google; I&amp;rsquo;ve been regularly participating for about four years.</description></item><item><title>Design patterns reviewed #1: creational</title><link>https://boyl.es/post/creational-design-patterns/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/creational-design-patterns/</guid><description>&lt;p>This is the first post in a series in which I&amp;rsquo;ll be reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>, giving my opinions on which you
should use and which you should avoid. I&amp;rsquo;ve grouped them into the same categories as they are in the Gang of Four&amp;rsquo;s
&lt;a href="https://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612">&lt;em>Design Patterns&lt;/em>&lt;/a>. The first
group I&amp;rsquo;ll be covering are &lt;a href="https://en.wikipedia.org/wiki/Creational_pattern">creational patterns&lt;/a>. These are all
strategies that you can choose when deciding how to instantiate an object.&lt;/p></description></item><item><title>Stop using Maven deploy</title><link>https://boyl.es/post/stop-using-maven-deploy/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/stop-using-maven-deploy/</guid><description>mvn deploy is the final phase of Maven&amp;rsquo;s build lifecycle. It&amp;rsquo;s responsible for uploading the artifacts produced by the previous phases of the build to an artifact repository like Nexus where they can be stored and accessed by other dependent projects, or used as part of an automated deployment.</description></item></channel></rss>