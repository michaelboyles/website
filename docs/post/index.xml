<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Michael Boyles</title><link>https://boyl.es/post/</link><description>Recent content in Posts on Michael Boyles</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 25 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://boyl.es/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns Reviewed - Part 2: Structural</title><link>https://boyl.es/post/structural-design-patterns/</link><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/structural-design-patterns/</guid><description>&lt;p>This is the second post in a series in which I’m reviewing &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>. This time out I&amp;rsquo;m taking a look at &lt;a href="https://en.wikipedia.org/wiki/Structural_pattern">structural patterns&lt;/a>. These are all strategies for defining and managing relationships between classes and interfaces.&lt;/p></description></item><item><title>Hybrid CI</title><link>https://boyl.es/post/hybrid-ci/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/hybrid-ci/</guid><description>&lt;p>The company I work for uses GitLab to host our Git repositories. Along with &lt;a href="https://techcrunch.com/2019/08/08/github-actions-is-now-a-ci-cd-service/">GitHub more recently&lt;/a>, it provides a way to build your projects directly within the service without relying on an external build server like Jenkins or Travis. The general reaction here seems positive, and most people seem happy to rely on it for their only automated build now. I can see the benefits but I’m hesitant to fully commit. Hybrid CI is an approach I came up with so I could have my cake and eat it too.&lt;/p></description></item><item><title>SOLID: the 'SO' stands for Snake Oil</title><link>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</guid><description>&lt;p>SOLID is possibly the most over-hyped concept in all of software engineering. You can throw away that jar of Sudocrem because we&amp;rsquo;ll have no fence-sitting today, no sir.&lt;/p></description></item><item><title>Next month StackOverflow will pass a catastrophic point in its history</title><link>https://boyl.es/post/next-month-stackoverflow-will-pass-a-catastrophic-point/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/next-month-stackoverflow-will-pass-a-catastrophic-point/</guid><description>I’ve used StackOverflow a lot. I’m not just talking about landing there from Google; I’ve been regularly participating for about four years.</description></item><item><title>Design Patterns Reviewed - Part 1: Creational</title><link>https://boyl.es/post/creational-design-patterns/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/creational-design-patterns/</guid><description>&lt;p>This is the first post in a series in which I’ll be reviewing &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>, giving my opinions on which you should use and which you should avoid. I&amp;rsquo;ve grouped them into the same categories as they are in the Gang of Four’s &lt;a href="https://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612">&lt;em>Design Patterns&lt;/em>&lt;/a>. The first group I’ll be covering are &lt;a href="https://en.wikipedia.org/wiki/Creational_pattern">creational patterns&lt;/a>. These are all strategies that you can choose when deciding how to instantiate an object.&lt;/p></description></item><item><title>Stop Using Maven Deploy</title><link>https://boyl.es/post/stop-using-maven-deploy/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/stop-using-maven-deploy/</guid><description>mvn deploy is the final phase of Maven&amp;rsquo;s build lifecycle. It’s responsible for uploading the artifacts produced by the previous phases of the build to an artifact repository like Nexus where they can be stored and accessed by other dependent projects, or used as part of an automated deployment.</description></item></channel></rss>