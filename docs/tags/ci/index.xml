<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ci on Michael Boyles</title><link>https://boyl.es/tags/ci/</link><description>Recent content in ci on Michael Boyles</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 18 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://boyl.es/tags/ci/index.xml" rel="self" type="application/rss+xml"/><item><title>Hybrid CI</title><link>https://boyl.es/post/hybrid-ci/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/hybrid-ci/</guid><description>&lt;p>The company I work for uses GitLab to host our Git repositories. Along with &lt;a href="https://techcrunch.com/2019/08/08/github-actions-is-now-a-ci-cd-service/">GitHub more recently&lt;/a>, it provides a way to build your projects directly within the service without relying on an external build server like Jenkins or Travis. The general reaction here seems positive, and most people seem happy to rely on it for their only automated build now. I can see the benefits but I’m hesitant to fully commit. Hybrid CI is an approach I came up with so I could have my cake and eat it too.&lt;/p></description></item><item><title>Stop Using Maven Deploy</title><link>https://boyl.es/post/stop-using-maven-deploy/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/stop-using-maven-deploy/</guid><description>mvn deploy is the final phase of Maven&amp;rsquo;s build lifecycle. It’s responsible for uploading the artifacts produced by the previous phases of the build to an artifact repository like Nexus where they can be stored and accessed by other dependent projects, or used as part of an automated deployment.</description></item></channel></rss>