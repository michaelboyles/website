<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maven on Michael Boyles</title><link>https://boyl.es/tags/maven/</link><description>Recent content in maven on Michael Boyles</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://boyl.es/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Two Versions of a Library in Java</title><link>https://boyl.es/post/two-versions-same-library/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://boyl.es/post/two-versions-same-library/</guid><description>&lt;p>Java and its build tools aren&amp;rsquo;t designed to support using two different versions of the same library at runtime.
Generally, that&amp;rsquo;s a conflict that&amp;rsquo;s automatically resolved to one or the other, and that&amp;rsquo;s exactly what we want. But
what if it&amp;rsquo;s not? With a few tricks, it&amp;rsquo;s possible to circumvent that behaviour.&lt;/p></description></item><item><title>Stop using Maven deploy</title><link>https://boyl.es/post/stop-using-maven-deploy/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/stop-using-maven-deploy/</guid><description>mvn deploy is the final phase of Maven&amp;rsquo;s build lifecycle. It&amp;rsquo;s responsible for uploading the artifacts produced by the previous phases of the build to an artifact repository like Nexus where they can be stored and accessed by other dependent projects, or used as part of an automated deployment.</description></item></channel></rss>