<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on Michael Boyles</title><link>https://boyl.es/tags/design/</link><description>Recent content in design on Michael Boyles</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 25 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://boyl.es/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Design patterns reviewed #3: behavioural</title><link>https://boyl.es/post/behavioural-design-patterns/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/behavioural-design-patterns/</guid><description>&lt;p>This is the third and final post in a series in which I’m reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>. This time out I&amp;rsquo;m taking a look at
&lt;a href="https://en.wikipedia.org/wiki/Behavioral_pattern">behavioural patterns&lt;/a>. These all &amp;ldquo;&lt;em>characterize the ways in which
classes or objects interact&lt;/em>&amp;rdquo;. If that sounds indistinct from structural patterns, it&amp;rsquo;s because it is. Just go with it.&lt;/p></description></item><item><title>Reflection is a crutch of the Java ecosystem</title><link>https://boyl.es/post/reflection-is-a-crutch-of-java-ecosystem/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://boyl.es/post/reflection-is-a-crutch-of-java-ecosystem/</guid><description>&lt;p>Java gained traction because you could write code which could run anywhere, but it continues to be successful in a large
part due to its fantastic ecosystem. Libraries like Spring, Hibernate and Gson are comparable to, if not better than,
practically any equivalent tools available for other languages. However, they&amp;rsquo;ve helped popularise the idea that using
&lt;a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">reflection&lt;/a> is likely to be an intrinsic
part of writing a Java library or framework. As Java developers, we&amp;rsquo;re being short-changed with solutions that force us
to sacrifice strong typing and are impossible to debug.&lt;/p></description></item><item><title>Design patterns reviewed #2: structural</title><link>https://boyl.es/post/structural-design-patterns/</link><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/structural-design-patterns/</guid><description>&lt;p>This is the second post in a series in which I’m reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>. This time out I&amp;rsquo;m taking a look at
&lt;a href="https://en.wikipedia.org/wiki/Structural_pattern">structural patterns&lt;/a>. These are all strategies for defining and
managing relationships between classes and interfaces.&lt;/p></description></item><item><title>SOLID: the 'SO' stands for Snake Oil</title><link>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/solid-the-so-stands-for-snake-oil/</guid><description>&lt;p>SOLID is possibly the most over-hyped concept in all of software engineering. You can throw away that jar of Sudocrem
because we&amp;rsquo;ll have no fence-sitting today, no sir.&lt;/p></description></item><item><title>Design patterns reviewed #1: creational</title><link>https://boyl.es/post/creational-design-patterns/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://boyl.es/post/creational-design-patterns/</guid><description>&lt;p>This is the first post in a series in which I&amp;rsquo;ll be reviewing
&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns&lt;/a>, giving my opinions on which you
should use and which you should avoid. I&amp;rsquo;ve grouped them into the same categories as they are in the Gang of Four&amp;rsquo;s
&lt;a href="https://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612">&lt;em>Design Patterns&lt;/em>&lt;/a>. The first
group I&amp;rsquo;ll be covering are &lt;a href="https://en.wikipedia.org/wiki/Creational_pattern">creational patterns&lt;/a>. These are all
strategies that you can choose when deciding how to instantiate an object.&lt;/p></description></item></channel></rss>